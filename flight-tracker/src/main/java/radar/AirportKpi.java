/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package radar;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class AirportKpi extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 7815912092596912398L;


  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"AirportKpi\",\"namespace\":\"radar\",\"fields\":[{\"name\":\"airport\",\"type\":\"string\"},{\"name\":\"city\",\"type\":\"string\"},{\"name\":\"country\",\"type\":\"string\"},{\"name\":\"code\",\"type\":\"string\"},{\"name\":\"latitude\",\"type\":[\"double\",\"null\"]},{\"name\":\"longitude\",\"type\":[\"double\",\"null\"]},{\"name\":\"tz\",\"type\":[\"string\",\"null\"]},{\"name\":\"departuresLast5Minutes\",\"type\":[\"null\",\"long\"]},{\"name\":\"canceledFlightsLast5Minutes\",\"type\":[\"null\",\"long\"]},{\"name\":\"minFlightDuration\",\"type\":[\"null\",\"long\"]},{\"name\":\"lastDepartureTimestamp\",\"type\":[\"null\",\"long\"]}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static final SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<AirportKpi> ENCODER =
      new BinaryMessageEncoder<>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<AirportKpi> DECODER =
      new BinaryMessageDecoder<>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<AirportKpi> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<AirportKpi> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<AirportKpi> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this AirportKpi to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a AirportKpi from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a AirportKpi instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static AirportKpi fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  private java.lang.CharSequence airport;
  private java.lang.CharSequence city;
  private java.lang.CharSequence country;
  private java.lang.CharSequence code;
  private java.lang.Double latitude;
  private java.lang.Double longitude;
  private java.lang.CharSequence tz;
  private java.lang.Long departuresLast5Minutes;
  private java.lang.Long canceledFlightsLast5Minutes;
  private java.lang.Long minFlightDuration;
  private java.lang.Long lastDepartureTimestamp;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public AirportKpi() {}

  /**
   * All-args constructor.
   * @param airport The new value for airport
   * @param city The new value for city
   * @param country The new value for country
   * @param code The new value for code
   * @param latitude The new value for latitude
   * @param longitude The new value for longitude
   * @param tz The new value for tz
   * @param departuresLast5Minutes The new value for departuresLast5Minutes
   * @param canceledFlightsLast5Minutes The new value for canceledFlightsLast5Minutes
   * @param minFlightDuration The new value for minFlightDuration
   * @param lastDepartureTimestamp The new value for lastDepartureTimestamp
   */
  public AirportKpi(java.lang.CharSequence airport, java.lang.CharSequence city, java.lang.CharSequence country, java.lang.CharSequence code, java.lang.Double latitude, java.lang.Double longitude, java.lang.CharSequence tz, java.lang.Long departuresLast5Minutes, java.lang.Long canceledFlightsLast5Minutes, java.lang.Long minFlightDuration, java.lang.Long lastDepartureTimestamp) {
    this.airport = airport;
    this.city = city;
    this.country = country;
    this.code = code;
    this.latitude = latitude;
    this.longitude = longitude;
    this.tz = tz;
    this.departuresLast5Minutes = departuresLast5Minutes;
    this.canceledFlightsLast5Minutes = canceledFlightsLast5Minutes;
    this.minFlightDuration = minFlightDuration;
    this.lastDepartureTimestamp = lastDepartureTimestamp;
  }

  @Override
  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }

  @Override
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }

  // Used by DatumWriter.  Applications should not call.
  @Override
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return airport;
    case 1: return city;
    case 2: return country;
    case 3: return code;
    case 4: return latitude;
    case 5: return longitude;
    case 6: return tz;
    case 7: return departuresLast5Minutes;
    case 8: return canceledFlightsLast5Minutes;
    case 9: return minFlightDuration;
    case 10: return lastDepartureTimestamp;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @Override
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: airport = (java.lang.CharSequence)value$; break;
    case 1: city = (java.lang.CharSequence)value$; break;
    case 2: country = (java.lang.CharSequence)value$; break;
    case 3: code = (java.lang.CharSequence)value$; break;
    case 4: latitude = (java.lang.Double)value$; break;
    case 5: longitude = (java.lang.Double)value$; break;
    case 6: tz = (java.lang.CharSequence)value$; break;
    case 7: departuresLast5Minutes = (java.lang.Long)value$; break;
    case 8: canceledFlightsLast5Minutes = (java.lang.Long)value$; break;
    case 9: minFlightDuration = (java.lang.Long)value$; break;
    case 10: lastDepartureTimestamp = (java.lang.Long)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'airport' field.
   * @return The value of the 'airport' field.
   */
  public java.lang.CharSequence getAirport() {
    return airport;
  }


  /**
   * Sets the value of the 'airport' field.
   * @param value the value to set.
   */
  public void setAirport(java.lang.CharSequence value) {
    this.airport = value;
  }

  /**
   * Gets the value of the 'city' field.
   * @return The value of the 'city' field.
   */
  public java.lang.CharSequence getCity() {
    return city;
  }


  /**
   * Sets the value of the 'city' field.
   * @param value the value to set.
   */
  public void setCity(java.lang.CharSequence value) {
    this.city = value;
  }

  /**
   * Gets the value of the 'country' field.
   * @return The value of the 'country' field.
   */
  public java.lang.CharSequence getCountry() {
    return country;
  }


  /**
   * Sets the value of the 'country' field.
   * @param value the value to set.
   */
  public void setCountry(java.lang.CharSequence value) {
    this.country = value;
  }

  /**
   * Gets the value of the 'code' field.
   * @return The value of the 'code' field.
   */
  public java.lang.CharSequence getCode() {
    return code;
  }


  /**
   * Sets the value of the 'code' field.
   * @param value the value to set.
   */
  public void setCode(java.lang.CharSequence value) {
    this.code = value;
  }

  /**
   * Gets the value of the 'latitude' field.
   * @return The value of the 'latitude' field.
   */
  public java.lang.Double getLatitude() {
    return latitude;
  }


  /**
   * Sets the value of the 'latitude' field.
   * @param value the value to set.
   */
  public void setLatitude(java.lang.Double value) {
    this.latitude = value;
  }

  /**
   * Gets the value of the 'longitude' field.
   * @return The value of the 'longitude' field.
   */
  public java.lang.Double getLongitude() {
    return longitude;
  }


  /**
   * Sets the value of the 'longitude' field.
   * @param value the value to set.
   */
  public void setLongitude(java.lang.Double value) {
    this.longitude = value;
  }

  /**
   * Gets the value of the 'tz' field.
   * @return The value of the 'tz' field.
   */
  public java.lang.CharSequence getTz() {
    return tz;
  }


  /**
   * Sets the value of the 'tz' field.
   * @param value the value to set.
   */
  public void setTz(java.lang.CharSequence value) {
    this.tz = value;
  }

  /**
   * Gets the value of the 'departuresLast5Minutes' field.
   * @return The value of the 'departuresLast5Minutes' field.
   */
  public java.lang.Long getDeparturesLast5Minutes() {
    return departuresLast5Minutes;
  }


  /**
   * Sets the value of the 'departuresLast5Minutes' field.
   * @param value the value to set.
   */
  public void setDeparturesLast5Minutes(java.lang.Long value) {
    this.departuresLast5Minutes = value;
  }

  /**
   * Gets the value of the 'canceledFlightsLast5Minutes' field.
   * @return The value of the 'canceledFlightsLast5Minutes' field.
   */
  public java.lang.Long getCanceledFlightsLast5Minutes() {
    return canceledFlightsLast5Minutes;
  }


  /**
   * Sets the value of the 'canceledFlightsLast5Minutes' field.
   * @param value the value to set.
   */
  public void setCanceledFlightsLast5Minutes(java.lang.Long value) {
    this.canceledFlightsLast5Minutes = value;
  }

  /**
   * Gets the value of the 'minFlightDuration' field.
   * @return The value of the 'minFlightDuration' field.
   */
  public java.lang.Long getMinFlightDuration() {
    return minFlightDuration;
  }


  /**
   * Sets the value of the 'minFlightDuration' field.
   * @param value the value to set.
   */
  public void setMinFlightDuration(java.lang.Long value) {
    this.minFlightDuration = value;
  }

  /**
   * Gets the value of the 'lastDepartureTimestamp' field.
   * @return The value of the 'lastDepartureTimestamp' field.
   */
  public java.lang.Long getLastDepartureTimestamp() {
    return lastDepartureTimestamp;
  }


  /**
   * Sets the value of the 'lastDepartureTimestamp' field.
   * @param value the value to set.
   */
  public void setLastDepartureTimestamp(java.lang.Long value) {
    this.lastDepartureTimestamp = value;
  }

  /**
   * Creates a new AirportKpi RecordBuilder.
   * @return A new AirportKpi RecordBuilder
   */
  public static radar.AirportKpi.Builder newBuilder() {
    return new radar.AirportKpi.Builder();
  }

  /**
   * Creates a new AirportKpi RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new AirportKpi RecordBuilder
   */
  public static radar.AirportKpi.Builder newBuilder(radar.AirportKpi.Builder other) {
    if (other == null) {
      return new radar.AirportKpi.Builder();
    } else {
      return new radar.AirportKpi.Builder(other);
    }
  }

  /**
   * Creates a new AirportKpi RecordBuilder by copying an existing AirportKpi instance.
   * @param other The existing instance to copy.
   * @return A new AirportKpi RecordBuilder
   */
  public static radar.AirportKpi.Builder newBuilder(radar.AirportKpi other) {
    if (other == null) {
      return new radar.AirportKpi.Builder();
    } else {
      return new radar.AirportKpi.Builder(other);
    }
  }

  /**
   * RecordBuilder for AirportKpi instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<AirportKpi>
    implements org.apache.avro.data.RecordBuilder<AirportKpi> {

    private java.lang.CharSequence airport;
    private java.lang.CharSequence city;
    private java.lang.CharSequence country;
    private java.lang.CharSequence code;
    private java.lang.Double latitude;
    private java.lang.Double longitude;
    private java.lang.CharSequence tz;
    private java.lang.Long departuresLast5Minutes;
    private java.lang.Long canceledFlightsLast5Minutes;
    private java.lang.Long minFlightDuration;
    private java.lang.Long lastDepartureTimestamp;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$, MODEL$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(radar.AirportKpi.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.airport)) {
        this.airport = data().deepCopy(fields()[0].schema(), other.airport);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.city)) {
        this.city = data().deepCopy(fields()[1].schema(), other.city);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.country)) {
        this.country = data().deepCopy(fields()[2].schema(), other.country);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.code)) {
        this.code = data().deepCopy(fields()[3].schema(), other.code);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (isValidValue(fields()[4], other.latitude)) {
        this.latitude = data().deepCopy(fields()[4].schema(), other.latitude);
        fieldSetFlags()[4] = other.fieldSetFlags()[4];
      }
      if (isValidValue(fields()[5], other.longitude)) {
        this.longitude = data().deepCopy(fields()[5].schema(), other.longitude);
        fieldSetFlags()[5] = other.fieldSetFlags()[5];
      }
      if (isValidValue(fields()[6], other.tz)) {
        this.tz = data().deepCopy(fields()[6].schema(), other.tz);
        fieldSetFlags()[6] = other.fieldSetFlags()[6];
      }
      if (isValidValue(fields()[7], other.departuresLast5Minutes)) {
        this.departuresLast5Minutes = data().deepCopy(fields()[7].schema(), other.departuresLast5Minutes);
        fieldSetFlags()[7] = other.fieldSetFlags()[7];
      }
      if (isValidValue(fields()[8], other.canceledFlightsLast5Minutes)) {
        this.canceledFlightsLast5Minutes = data().deepCopy(fields()[8].schema(), other.canceledFlightsLast5Minutes);
        fieldSetFlags()[8] = other.fieldSetFlags()[8];
      }
      if (isValidValue(fields()[9], other.minFlightDuration)) {
        this.minFlightDuration = data().deepCopy(fields()[9].schema(), other.minFlightDuration);
        fieldSetFlags()[9] = other.fieldSetFlags()[9];
      }
      if (isValidValue(fields()[10], other.lastDepartureTimestamp)) {
        this.lastDepartureTimestamp = data().deepCopy(fields()[10].schema(), other.lastDepartureTimestamp);
        fieldSetFlags()[10] = other.fieldSetFlags()[10];
      }
    }

    /**
     * Creates a Builder by copying an existing AirportKpi instance
     * @param other The existing instance to copy.
     */
    private Builder(radar.AirportKpi other) {
      super(SCHEMA$, MODEL$);
      if (isValidValue(fields()[0], other.airport)) {
        this.airport = data().deepCopy(fields()[0].schema(), other.airport);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.city)) {
        this.city = data().deepCopy(fields()[1].schema(), other.city);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.country)) {
        this.country = data().deepCopy(fields()[2].schema(), other.country);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.code)) {
        this.code = data().deepCopy(fields()[3].schema(), other.code);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.latitude)) {
        this.latitude = data().deepCopy(fields()[4].schema(), other.latitude);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.longitude)) {
        this.longitude = data().deepCopy(fields()[5].schema(), other.longitude);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.tz)) {
        this.tz = data().deepCopy(fields()[6].schema(), other.tz);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.departuresLast5Minutes)) {
        this.departuresLast5Minutes = data().deepCopy(fields()[7].schema(), other.departuresLast5Minutes);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.canceledFlightsLast5Minutes)) {
        this.canceledFlightsLast5Minutes = data().deepCopy(fields()[8].schema(), other.canceledFlightsLast5Minutes);
        fieldSetFlags()[8] = true;
      }
      if (isValidValue(fields()[9], other.minFlightDuration)) {
        this.minFlightDuration = data().deepCopy(fields()[9].schema(), other.minFlightDuration);
        fieldSetFlags()[9] = true;
      }
      if (isValidValue(fields()[10], other.lastDepartureTimestamp)) {
        this.lastDepartureTimestamp = data().deepCopy(fields()[10].schema(), other.lastDepartureTimestamp);
        fieldSetFlags()[10] = true;
      }
    }

    /**
      * Gets the value of the 'airport' field.
      * @return The value.
      */
    public java.lang.CharSequence getAirport() {
      return airport;
    }


    /**
      * Sets the value of the 'airport' field.
      * @param value The value of 'airport'.
      * @return This builder.
      */
    public radar.AirportKpi.Builder setAirport(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.airport = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'airport' field has been set.
      * @return True if the 'airport' field has been set, false otherwise.
      */
    public boolean hasAirport() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'airport' field.
      * @return This builder.
      */
    public radar.AirportKpi.Builder clearAirport() {
      airport = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'city' field.
      * @return The value.
      */
    public java.lang.CharSequence getCity() {
      return city;
    }


    /**
      * Sets the value of the 'city' field.
      * @param value The value of 'city'.
      * @return This builder.
      */
    public radar.AirportKpi.Builder setCity(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.city = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'city' field has been set.
      * @return True if the 'city' field has been set, false otherwise.
      */
    public boolean hasCity() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'city' field.
      * @return This builder.
      */
    public radar.AirportKpi.Builder clearCity() {
      city = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'country' field.
      * @return The value.
      */
    public java.lang.CharSequence getCountry() {
      return country;
    }


    /**
      * Sets the value of the 'country' field.
      * @param value The value of 'country'.
      * @return This builder.
      */
    public radar.AirportKpi.Builder setCountry(java.lang.CharSequence value) {
      validate(fields()[2], value);
      this.country = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'country' field has been set.
      * @return True if the 'country' field has been set, false otherwise.
      */
    public boolean hasCountry() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'country' field.
      * @return This builder.
      */
    public radar.AirportKpi.Builder clearCountry() {
      country = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'code' field.
      * @return The value.
      */
    public java.lang.CharSequence getCode() {
      return code;
    }


    /**
      * Sets the value of the 'code' field.
      * @param value The value of 'code'.
      * @return This builder.
      */
    public radar.AirportKpi.Builder setCode(java.lang.CharSequence value) {
      validate(fields()[3], value);
      this.code = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'code' field has been set.
      * @return True if the 'code' field has been set, false otherwise.
      */
    public boolean hasCode() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'code' field.
      * @return This builder.
      */
    public radar.AirportKpi.Builder clearCode() {
      code = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'latitude' field.
      * @return The value.
      */
    public java.lang.Double getLatitude() {
      return latitude;
    }


    /**
      * Sets the value of the 'latitude' field.
      * @param value The value of 'latitude'.
      * @return This builder.
      */
    public radar.AirportKpi.Builder setLatitude(java.lang.Double value) {
      validate(fields()[4], value);
      this.latitude = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'latitude' field has been set.
      * @return True if the 'latitude' field has been set, false otherwise.
      */
    public boolean hasLatitude() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'latitude' field.
      * @return This builder.
      */
    public radar.AirportKpi.Builder clearLatitude() {
      latitude = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'longitude' field.
      * @return The value.
      */
    public java.lang.Double getLongitude() {
      return longitude;
    }


    /**
      * Sets the value of the 'longitude' field.
      * @param value The value of 'longitude'.
      * @return This builder.
      */
    public radar.AirportKpi.Builder setLongitude(java.lang.Double value) {
      validate(fields()[5], value);
      this.longitude = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'longitude' field has been set.
      * @return True if the 'longitude' field has been set, false otherwise.
      */
    public boolean hasLongitude() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'longitude' field.
      * @return This builder.
      */
    public radar.AirportKpi.Builder clearLongitude() {
      longitude = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
      * Gets the value of the 'tz' field.
      * @return The value.
      */
    public java.lang.CharSequence getTz() {
      return tz;
    }


    /**
      * Sets the value of the 'tz' field.
      * @param value The value of 'tz'.
      * @return This builder.
      */
    public radar.AirportKpi.Builder setTz(java.lang.CharSequence value) {
      validate(fields()[6], value);
      this.tz = value;
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
      * Checks whether the 'tz' field has been set.
      * @return True if the 'tz' field has been set, false otherwise.
      */
    public boolean hasTz() {
      return fieldSetFlags()[6];
    }


    /**
      * Clears the value of the 'tz' field.
      * @return This builder.
      */
    public radar.AirportKpi.Builder clearTz() {
      tz = null;
      fieldSetFlags()[6] = false;
      return this;
    }

    /**
      * Gets the value of the 'departuresLast5Minutes' field.
      * @return The value.
      */
    public java.lang.Long getDeparturesLast5Minutes() {
      return departuresLast5Minutes;
    }


    /**
      * Sets the value of the 'departuresLast5Minutes' field.
      * @param value The value of 'departuresLast5Minutes'.
      * @return This builder.
      */
    public radar.AirportKpi.Builder setDeparturesLast5Minutes(java.lang.Long value) {
      validate(fields()[7], value);
      this.departuresLast5Minutes = value;
      fieldSetFlags()[7] = true;
      return this;
    }

    /**
      * Checks whether the 'departuresLast5Minutes' field has been set.
      * @return True if the 'departuresLast5Minutes' field has been set, false otherwise.
      */
    public boolean hasDeparturesLast5Minutes() {
      return fieldSetFlags()[7];
    }


    /**
      * Clears the value of the 'departuresLast5Minutes' field.
      * @return This builder.
      */
    public radar.AirportKpi.Builder clearDeparturesLast5Minutes() {
      departuresLast5Minutes = null;
      fieldSetFlags()[7] = false;
      return this;
    }

    /**
      * Gets the value of the 'canceledFlightsLast5Minutes' field.
      * @return The value.
      */
    public java.lang.Long getCanceledFlightsLast5Minutes() {
      return canceledFlightsLast5Minutes;
    }


    /**
      * Sets the value of the 'canceledFlightsLast5Minutes' field.
      * @param value The value of 'canceledFlightsLast5Minutes'.
      * @return This builder.
      */
    public radar.AirportKpi.Builder setCanceledFlightsLast5Minutes(java.lang.Long value) {
      validate(fields()[8], value);
      this.canceledFlightsLast5Minutes = value;
      fieldSetFlags()[8] = true;
      return this;
    }

    /**
      * Checks whether the 'canceledFlightsLast5Minutes' field has been set.
      * @return True if the 'canceledFlightsLast5Minutes' field has been set, false otherwise.
      */
    public boolean hasCanceledFlightsLast5Minutes() {
      return fieldSetFlags()[8];
    }


    /**
      * Clears the value of the 'canceledFlightsLast5Minutes' field.
      * @return This builder.
      */
    public radar.AirportKpi.Builder clearCanceledFlightsLast5Minutes() {
      canceledFlightsLast5Minutes = null;
      fieldSetFlags()[8] = false;
      return this;
    }

    /**
      * Gets the value of the 'minFlightDuration' field.
      * @return The value.
      */
    public java.lang.Long getMinFlightDuration() {
      return minFlightDuration;
    }


    /**
      * Sets the value of the 'minFlightDuration' field.
      * @param value The value of 'minFlightDuration'.
      * @return This builder.
      */
    public radar.AirportKpi.Builder setMinFlightDuration(java.lang.Long value) {
      validate(fields()[9], value);
      this.minFlightDuration = value;
      fieldSetFlags()[9] = true;
      return this;
    }

    /**
      * Checks whether the 'minFlightDuration' field has been set.
      * @return True if the 'minFlightDuration' field has been set, false otherwise.
      */
    public boolean hasMinFlightDuration() {
      return fieldSetFlags()[9];
    }


    /**
      * Clears the value of the 'minFlightDuration' field.
      * @return This builder.
      */
    public radar.AirportKpi.Builder clearMinFlightDuration() {
      minFlightDuration = null;
      fieldSetFlags()[9] = false;
      return this;
    }

    /**
      * Gets the value of the 'lastDepartureTimestamp' field.
      * @return The value.
      */
    public java.lang.Long getLastDepartureTimestamp() {
      return lastDepartureTimestamp;
    }


    /**
      * Sets the value of the 'lastDepartureTimestamp' field.
      * @param value The value of 'lastDepartureTimestamp'.
      * @return This builder.
      */
    public radar.AirportKpi.Builder setLastDepartureTimestamp(java.lang.Long value) {
      validate(fields()[10], value);
      this.lastDepartureTimestamp = value;
      fieldSetFlags()[10] = true;
      return this;
    }

    /**
      * Checks whether the 'lastDepartureTimestamp' field has been set.
      * @return True if the 'lastDepartureTimestamp' field has been set, false otherwise.
      */
    public boolean hasLastDepartureTimestamp() {
      return fieldSetFlags()[10];
    }


    /**
      * Clears the value of the 'lastDepartureTimestamp' field.
      * @return This builder.
      */
    public radar.AirportKpi.Builder clearLastDepartureTimestamp() {
      lastDepartureTimestamp = null;
      fieldSetFlags()[10] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public AirportKpi build() {
      try {
        AirportKpi record = new AirportKpi();
        record.airport = fieldSetFlags()[0] ? this.airport : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.city = fieldSetFlags()[1] ? this.city : (java.lang.CharSequence) defaultValue(fields()[1]);
        record.country = fieldSetFlags()[2] ? this.country : (java.lang.CharSequence) defaultValue(fields()[2]);
        record.code = fieldSetFlags()[3] ? this.code : (java.lang.CharSequence) defaultValue(fields()[3]);
        record.latitude = fieldSetFlags()[4] ? this.latitude : (java.lang.Double) defaultValue(fields()[4]);
        record.longitude = fieldSetFlags()[5] ? this.longitude : (java.lang.Double) defaultValue(fields()[5]);
        record.tz = fieldSetFlags()[6] ? this.tz : (java.lang.CharSequence) defaultValue(fields()[6]);
        record.departuresLast5Minutes = fieldSetFlags()[7] ? this.departuresLast5Minutes : (java.lang.Long) defaultValue(fields()[7]);
        record.canceledFlightsLast5Minutes = fieldSetFlags()[8] ? this.canceledFlightsLast5Minutes : (java.lang.Long) defaultValue(fields()[8]);
        record.minFlightDuration = fieldSetFlags()[9] ? this.minFlightDuration : (java.lang.Long) defaultValue(fields()[9]);
        record.lastDepartureTimestamp = fieldSetFlags()[10] ? this.lastDepartureTimestamp : (java.lang.Long) defaultValue(fields()[10]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<AirportKpi>
    WRITER$ = (org.apache.avro.io.DatumWriter<AirportKpi>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<AirportKpi>
    READER$ = (org.apache.avro.io.DatumReader<AirportKpi>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    out.writeString(this.airport);

    out.writeString(this.city);

    out.writeString(this.country);

    out.writeString(this.code);

    if (this.latitude == null) {
      out.writeIndex(1);
      out.writeNull();
    } else {
      out.writeIndex(0);
      out.writeDouble(this.latitude);
    }

    if (this.longitude == null) {
      out.writeIndex(1);
      out.writeNull();
    } else {
      out.writeIndex(0);
      out.writeDouble(this.longitude);
    }

    if (this.tz == null) {
      out.writeIndex(1);
      out.writeNull();
    } else {
      out.writeIndex(0);
      out.writeString(this.tz);
    }

    if (this.departuresLast5Minutes == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeLong(this.departuresLast5Minutes);
    }

    if (this.canceledFlightsLast5Minutes == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeLong(this.canceledFlightsLast5Minutes);
    }

    if (this.minFlightDuration == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeLong(this.minFlightDuration);
    }

    if (this.lastDepartureTimestamp == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeLong(this.lastDepartureTimestamp);
    }

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      this.airport = in.readString(this.airport instanceof Utf8 ? (Utf8)this.airport : null);

      this.city = in.readString(this.city instanceof Utf8 ? (Utf8)this.city : null);

      this.country = in.readString(this.country instanceof Utf8 ? (Utf8)this.country : null);

      this.code = in.readString(this.code instanceof Utf8 ? (Utf8)this.code : null);

      if (in.readIndex() != 0) {
        in.readNull();
        this.latitude = null;
      } else {
        this.latitude = in.readDouble();
      }

      if (in.readIndex() != 0) {
        in.readNull();
        this.longitude = null;
      } else {
        this.longitude = in.readDouble();
      }

      if (in.readIndex() != 0) {
        in.readNull();
        this.tz = null;
      } else {
        this.tz = in.readString(this.tz instanceof Utf8 ? (Utf8)this.tz : null);
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.departuresLast5Minutes = null;
      } else {
        this.departuresLast5Minutes = in.readLong();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.canceledFlightsLast5Minutes = null;
      } else {
        this.canceledFlightsLast5Minutes = in.readLong();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.minFlightDuration = null;
      } else {
        this.minFlightDuration = in.readLong();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.lastDepartureTimestamp = null;
      } else {
        this.lastDepartureTimestamp = in.readLong();
      }

    } else {
      for (int i = 0; i < 11; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          this.airport = in.readString(this.airport instanceof Utf8 ? (Utf8)this.airport : null);
          break;

        case 1:
          this.city = in.readString(this.city instanceof Utf8 ? (Utf8)this.city : null);
          break;

        case 2:
          this.country = in.readString(this.country instanceof Utf8 ? (Utf8)this.country : null);
          break;

        case 3:
          this.code = in.readString(this.code instanceof Utf8 ? (Utf8)this.code : null);
          break;

        case 4:
          if (in.readIndex() != 0) {
            in.readNull();
            this.latitude = null;
          } else {
            this.latitude = in.readDouble();
          }
          break;

        case 5:
          if (in.readIndex() != 0) {
            in.readNull();
            this.longitude = null;
          } else {
            this.longitude = in.readDouble();
          }
          break;

        case 6:
          if (in.readIndex() != 0) {
            in.readNull();
            this.tz = null;
          } else {
            this.tz = in.readString(this.tz instanceof Utf8 ? (Utf8)this.tz : null);
          }
          break;

        case 7:
          if (in.readIndex() != 1) {
            in.readNull();
            this.departuresLast5Minutes = null;
          } else {
            this.departuresLast5Minutes = in.readLong();
          }
          break;

        case 8:
          if (in.readIndex() != 1) {
            in.readNull();
            this.canceledFlightsLast5Minutes = null;
          } else {
            this.canceledFlightsLast5Minutes = in.readLong();
          }
          break;

        case 9:
          if (in.readIndex() != 1) {
            in.readNull();
            this.minFlightDuration = null;
          } else {
            this.minFlightDuration = in.readLong();
          }
          break;

        case 10:
          if (in.readIndex() != 1) {
            in.readNull();
            this.lastDepartureTimestamp = null;
          } else {
            this.lastDepartureTimestamp = in.readLong();
          }
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










