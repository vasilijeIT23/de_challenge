/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package radar;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class Flight extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -790584743678027430L;


  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Flight\",\"namespace\":\"radar\",\"fields\":[{\"name\":\"id\",\"type\":\"string\"},{\"name\":\"date\",\"type\":[\"string\",\"null\"]},{\"name\":\"from\",\"type\":\"string\"},{\"name\":\"to\",\"type\":\"string\"},{\"name\":\"departureAirportCode\",\"type\":\"string\"},{\"name\":\"arrivalAirportCode\",\"type\":\"string\"},{\"name\":\"departureTime\",\"type\":[\"string\",\"null\"]},{\"name\":\"arrivalTime\",\"type\":[\"string\",\"null\"]},{\"name\":\"departureTimestamp\",\"type\":[\"long\",\"null\"]},{\"name\":\"arrivalTimestamp\",\"type\":[\"long\",\"null\"]},{\"name\":\"duration\",\"type\":[\"long\",\"null\"]},{\"name\":\"status\",\"type\":[\"string\",\"null\"]},{\"name\":\"gate\",\"type\":[\"string\",\"null\"]},{\"name\":\"airline\",\"type\":[\"string\",\"null\"]}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static final SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<Flight> ENCODER =
      new BinaryMessageEncoder<>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<Flight> DECODER =
      new BinaryMessageDecoder<>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<Flight> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<Flight> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<Flight> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this Flight to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a Flight from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a Flight instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static Flight fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  private java.lang.CharSequence id;
  private java.lang.CharSequence date;
  private java.lang.CharSequence from;
  private java.lang.CharSequence to;
  private java.lang.CharSequence departureAirportCode;
  private java.lang.CharSequence arrivalAirportCode;
  private java.lang.CharSequence departureTime;
  private java.lang.CharSequence arrivalTime;
  private java.lang.Long departureTimestamp;
  private java.lang.Long arrivalTimestamp;
  private java.lang.Long duration;
  private java.lang.CharSequence status;
  private java.lang.CharSequence gate;
  private java.lang.CharSequence airline;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public Flight() {}

  /**
   * All-args constructor.
   * @param id The new value for id
   * @param date The new value for date
   * @param from The new value for from
   * @param to The new value for to
   * @param departureAirportCode The new value for departureAirportCode
   * @param arrivalAirportCode The new value for arrivalAirportCode
   * @param departureTime The new value for departureTime
   * @param arrivalTime The new value for arrivalTime
   * @param departureTimestamp The new value for departureTimestamp
   * @param arrivalTimestamp The new value for arrivalTimestamp
   * @param duration The new value for duration
   * @param status The new value for status
   * @param gate The new value for gate
   * @param airline The new value for airline
   */
  public Flight(java.lang.CharSequence id, java.lang.CharSequence date, java.lang.CharSequence from, java.lang.CharSequence to, java.lang.CharSequence departureAirportCode, java.lang.CharSequence arrivalAirportCode, java.lang.CharSequence departureTime, java.lang.CharSequence arrivalTime, java.lang.Long departureTimestamp, java.lang.Long arrivalTimestamp, java.lang.Long duration, java.lang.CharSequence status, java.lang.CharSequence gate, java.lang.CharSequence airline) {
    this.id = id;
    this.date = date;
    this.from = from;
    this.to = to;
    this.departureAirportCode = departureAirportCode;
    this.arrivalAirportCode = arrivalAirportCode;
    this.departureTime = departureTime;
    this.arrivalTime = arrivalTime;
    this.departureTimestamp = departureTimestamp;
    this.arrivalTimestamp = arrivalTimestamp;
    this.duration = duration;
    this.status = status;
    this.gate = gate;
    this.airline = airline;
  }

  @Override
  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }

  @Override
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }

  // Used by DatumWriter.  Applications should not call.
  @Override
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return id;
    case 1: return date;
    case 2: return from;
    case 3: return to;
    case 4: return departureAirportCode;
    case 5: return arrivalAirportCode;
    case 6: return departureTime;
    case 7: return arrivalTime;
    case 8: return departureTimestamp;
    case 9: return arrivalTimestamp;
    case 10: return duration;
    case 11: return status;
    case 12: return gate;
    case 13: return airline;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @Override
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: id = (java.lang.CharSequence)value$; break;
    case 1: date = (java.lang.CharSequence)value$; break;
    case 2: from = (java.lang.CharSequence)value$; break;
    case 3: to = (java.lang.CharSequence)value$; break;
    case 4: departureAirportCode = (java.lang.CharSequence)value$; break;
    case 5: arrivalAirportCode = (java.lang.CharSequence)value$; break;
    case 6: departureTime = (java.lang.CharSequence)value$; break;
    case 7: arrivalTime = (java.lang.CharSequence)value$; break;
    case 8: departureTimestamp = (java.lang.Long)value$; break;
    case 9: arrivalTimestamp = (java.lang.Long)value$; break;
    case 10: duration = (java.lang.Long)value$; break;
    case 11: status = (java.lang.CharSequence)value$; break;
    case 12: gate = (java.lang.CharSequence)value$; break;
    case 13: airline = (java.lang.CharSequence)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'id' field.
   * @return The value of the 'id' field.
   */
  public java.lang.CharSequence getId() {
    return id;
  }


  /**
   * Sets the value of the 'id' field.
   * @param value the value to set.
   */
  public void setId(java.lang.CharSequence value) {
    this.id = value;
  }

  /**
   * Gets the value of the 'date' field.
   * @return The value of the 'date' field.
   */
  public java.lang.CharSequence getDate() {
    return date;
  }


  /**
   * Sets the value of the 'date' field.
   * @param value the value to set.
   */
  public void setDate(java.lang.CharSequence value) {
    this.date = value;
  }

  /**
   * Gets the value of the 'from' field.
   * @return The value of the 'from' field.
   */
  public java.lang.CharSequence getFrom() {
    return from;
  }


  /**
   * Sets the value of the 'from' field.
   * @param value the value to set.
   */
  public void setFrom(java.lang.CharSequence value) {
    this.from = value;
  }

  /**
   * Gets the value of the 'to' field.
   * @return The value of the 'to' field.
   */
  public java.lang.CharSequence getTo() {
    return to;
  }


  /**
   * Sets the value of the 'to' field.
   * @param value the value to set.
   */
  public void setTo(java.lang.CharSequence value) {
    this.to = value;
  }

  /**
   * Gets the value of the 'departureAirportCode' field.
   * @return The value of the 'departureAirportCode' field.
   */
  public java.lang.CharSequence getDepartureAirportCode() {
    return departureAirportCode;
  }


  /**
   * Sets the value of the 'departureAirportCode' field.
   * @param value the value to set.
   */
  public void setDepartureAirportCode(java.lang.CharSequence value) {
    this.departureAirportCode = value;
  }

  /**
   * Gets the value of the 'arrivalAirportCode' field.
   * @return The value of the 'arrivalAirportCode' field.
   */
  public java.lang.CharSequence getArrivalAirportCode() {
    return arrivalAirportCode;
  }


  /**
   * Sets the value of the 'arrivalAirportCode' field.
   * @param value the value to set.
   */
  public void setArrivalAirportCode(java.lang.CharSequence value) {
    this.arrivalAirportCode = value;
  }

  /**
   * Gets the value of the 'departureTime' field.
   * @return The value of the 'departureTime' field.
   */
  public java.lang.CharSequence getDepartureTime() {
    return departureTime;
  }


  /**
   * Sets the value of the 'departureTime' field.
   * @param value the value to set.
   */
  public void setDepartureTime(java.lang.CharSequence value) {
    this.departureTime = value;
  }

  /**
   * Gets the value of the 'arrivalTime' field.
   * @return The value of the 'arrivalTime' field.
   */
  public java.lang.CharSequence getArrivalTime() {
    return arrivalTime;
  }


  /**
   * Sets the value of the 'arrivalTime' field.
   * @param value the value to set.
   */
  public void setArrivalTime(java.lang.CharSequence value) {
    this.arrivalTime = value;
  }

  /**
   * Gets the value of the 'departureTimestamp' field.
   * @return The value of the 'departureTimestamp' field.
   */
  public java.lang.Long getDepartureTimestamp() {
    return departureTimestamp;
  }


  /**
   * Sets the value of the 'departureTimestamp' field.
   * @param value the value to set.
   */
  public void setDepartureTimestamp(java.lang.Long value) {
    this.departureTimestamp = value;
  }

  /**
   * Gets the value of the 'arrivalTimestamp' field.
   * @return The value of the 'arrivalTimestamp' field.
   */
  public java.lang.Long getArrivalTimestamp() {
    return arrivalTimestamp;
  }


  /**
   * Sets the value of the 'arrivalTimestamp' field.
   * @param value the value to set.
   */
  public void setArrivalTimestamp(java.lang.Long value) {
    this.arrivalTimestamp = value;
  }

  /**
   * Gets the value of the 'duration' field.
   * @return The value of the 'duration' field.
   */
  public java.lang.Long getDuration() {
    return duration;
  }


  /**
   * Sets the value of the 'duration' field.
   * @param value the value to set.
   */
  public void setDuration(java.lang.Long value) {
    this.duration = value;
  }

  /**
   * Gets the value of the 'status' field.
   * @return The value of the 'status' field.
   */
  public java.lang.CharSequence getStatus() {
    return status;
  }


  /**
   * Sets the value of the 'status' field.
   * @param value the value to set.
   */
  public void setStatus(java.lang.CharSequence value) {
    this.status = value;
  }

  /**
   * Gets the value of the 'gate' field.
   * @return The value of the 'gate' field.
   */
  public java.lang.CharSequence getGate() {
    return gate;
  }


  /**
   * Sets the value of the 'gate' field.
   * @param value the value to set.
   */
  public void setGate(java.lang.CharSequence value) {
    this.gate = value;
  }

  /**
   * Gets the value of the 'airline' field.
   * @return The value of the 'airline' field.
   */
  public java.lang.CharSequence getAirline() {
    return airline;
  }


  /**
   * Sets the value of the 'airline' field.
   * @param value the value to set.
   */
  public void setAirline(java.lang.CharSequence value) {
    this.airline = value;
  }

  /**
   * Creates a new Flight RecordBuilder.
   * @return A new Flight RecordBuilder
   */
  public static radar.Flight.Builder newBuilder() {
    return new radar.Flight.Builder();
  }

  /**
   * Creates a new Flight RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new Flight RecordBuilder
   */
  public static radar.Flight.Builder newBuilder(radar.Flight.Builder other) {
    if (other == null) {
      return new radar.Flight.Builder();
    } else {
      return new radar.Flight.Builder(other);
    }
  }

  /**
   * Creates a new Flight RecordBuilder by copying an existing Flight instance.
   * @param other The existing instance to copy.
   * @return A new Flight RecordBuilder
   */
  public static radar.Flight.Builder newBuilder(radar.Flight other) {
    if (other == null) {
      return new radar.Flight.Builder();
    } else {
      return new radar.Flight.Builder(other);
    }
  }

  /**
   * RecordBuilder for Flight instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Flight>
    implements org.apache.avro.data.RecordBuilder<Flight> {

    private java.lang.CharSequence id;
    private java.lang.CharSequence date;
    private java.lang.CharSequence from;
    private java.lang.CharSequence to;
    private java.lang.CharSequence departureAirportCode;
    private java.lang.CharSequence arrivalAirportCode;
    private java.lang.CharSequence departureTime;
    private java.lang.CharSequence arrivalTime;
    private java.lang.Long departureTimestamp;
    private java.lang.Long arrivalTimestamp;
    private java.lang.Long duration;
    private java.lang.CharSequence status;
    private java.lang.CharSequence gate;
    private java.lang.CharSequence airline;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$, MODEL$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(radar.Flight.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.id)) {
        this.id = data().deepCopy(fields()[0].schema(), other.id);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.date)) {
        this.date = data().deepCopy(fields()[1].schema(), other.date);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.from)) {
        this.from = data().deepCopy(fields()[2].schema(), other.from);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.to)) {
        this.to = data().deepCopy(fields()[3].schema(), other.to);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (isValidValue(fields()[4], other.departureAirportCode)) {
        this.departureAirportCode = data().deepCopy(fields()[4].schema(), other.departureAirportCode);
        fieldSetFlags()[4] = other.fieldSetFlags()[4];
      }
      if (isValidValue(fields()[5], other.arrivalAirportCode)) {
        this.arrivalAirportCode = data().deepCopy(fields()[5].schema(), other.arrivalAirportCode);
        fieldSetFlags()[5] = other.fieldSetFlags()[5];
      }
      if (isValidValue(fields()[6], other.departureTime)) {
        this.departureTime = data().deepCopy(fields()[6].schema(), other.departureTime);
        fieldSetFlags()[6] = other.fieldSetFlags()[6];
      }
      if (isValidValue(fields()[7], other.arrivalTime)) {
        this.arrivalTime = data().deepCopy(fields()[7].schema(), other.arrivalTime);
        fieldSetFlags()[7] = other.fieldSetFlags()[7];
      }
      if (isValidValue(fields()[8], other.departureTimestamp)) {
        this.departureTimestamp = data().deepCopy(fields()[8].schema(), other.departureTimestamp);
        fieldSetFlags()[8] = other.fieldSetFlags()[8];
      }
      if (isValidValue(fields()[9], other.arrivalTimestamp)) {
        this.arrivalTimestamp = data().deepCopy(fields()[9].schema(), other.arrivalTimestamp);
        fieldSetFlags()[9] = other.fieldSetFlags()[9];
      }
      if (isValidValue(fields()[10], other.duration)) {
        this.duration = data().deepCopy(fields()[10].schema(), other.duration);
        fieldSetFlags()[10] = other.fieldSetFlags()[10];
      }
      if (isValidValue(fields()[11], other.status)) {
        this.status = data().deepCopy(fields()[11].schema(), other.status);
        fieldSetFlags()[11] = other.fieldSetFlags()[11];
      }
      if (isValidValue(fields()[12], other.gate)) {
        this.gate = data().deepCopy(fields()[12].schema(), other.gate);
        fieldSetFlags()[12] = other.fieldSetFlags()[12];
      }
      if (isValidValue(fields()[13], other.airline)) {
        this.airline = data().deepCopy(fields()[13].schema(), other.airline);
        fieldSetFlags()[13] = other.fieldSetFlags()[13];
      }
    }

    /**
     * Creates a Builder by copying an existing Flight instance
     * @param other The existing instance to copy.
     */
    private Builder(radar.Flight other) {
      super(SCHEMA$, MODEL$);
      if (isValidValue(fields()[0], other.id)) {
        this.id = data().deepCopy(fields()[0].schema(), other.id);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.date)) {
        this.date = data().deepCopy(fields()[1].schema(), other.date);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.from)) {
        this.from = data().deepCopy(fields()[2].schema(), other.from);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.to)) {
        this.to = data().deepCopy(fields()[3].schema(), other.to);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.departureAirportCode)) {
        this.departureAirportCode = data().deepCopy(fields()[4].schema(), other.departureAirportCode);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.arrivalAirportCode)) {
        this.arrivalAirportCode = data().deepCopy(fields()[5].schema(), other.arrivalAirportCode);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.departureTime)) {
        this.departureTime = data().deepCopy(fields()[6].schema(), other.departureTime);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.arrivalTime)) {
        this.arrivalTime = data().deepCopy(fields()[7].schema(), other.arrivalTime);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.departureTimestamp)) {
        this.departureTimestamp = data().deepCopy(fields()[8].schema(), other.departureTimestamp);
        fieldSetFlags()[8] = true;
      }
      if (isValidValue(fields()[9], other.arrivalTimestamp)) {
        this.arrivalTimestamp = data().deepCopy(fields()[9].schema(), other.arrivalTimestamp);
        fieldSetFlags()[9] = true;
      }
      if (isValidValue(fields()[10], other.duration)) {
        this.duration = data().deepCopy(fields()[10].schema(), other.duration);
        fieldSetFlags()[10] = true;
      }
      if (isValidValue(fields()[11], other.status)) {
        this.status = data().deepCopy(fields()[11].schema(), other.status);
        fieldSetFlags()[11] = true;
      }
      if (isValidValue(fields()[12], other.gate)) {
        this.gate = data().deepCopy(fields()[12].schema(), other.gate);
        fieldSetFlags()[12] = true;
      }
      if (isValidValue(fields()[13], other.airline)) {
        this.airline = data().deepCopy(fields()[13].schema(), other.airline);
        fieldSetFlags()[13] = true;
      }
    }

    /**
      * Gets the value of the 'id' field.
      * @return The value.
      */
    public java.lang.CharSequence getId() {
      return id;
    }


    /**
      * Sets the value of the 'id' field.
      * @param value The value of 'id'.
      * @return This builder.
      */
    public radar.Flight.Builder setId(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.id = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'id' field has been set.
      * @return True if the 'id' field has been set, false otherwise.
      */
    public boolean hasId() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'id' field.
      * @return This builder.
      */
    public radar.Flight.Builder clearId() {
      id = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'date' field.
      * @return The value.
      */
    public java.lang.CharSequence getDate() {
      return date;
    }


    /**
      * Sets the value of the 'date' field.
      * @param value The value of 'date'.
      * @return This builder.
      */
    public radar.Flight.Builder setDate(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.date = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'date' field has been set.
      * @return True if the 'date' field has been set, false otherwise.
      */
    public boolean hasDate() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'date' field.
      * @return This builder.
      */
    public radar.Flight.Builder clearDate() {
      date = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'from' field.
      * @return The value.
      */
    public java.lang.CharSequence getFrom() {
      return from;
    }


    /**
      * Sets the value of the 'from' field.
      * @param value The value of 'from'.
      * @return This builder.
      */
    public radar.Flight.Builder setFrom(java.lang.CharSequence value) {
      validate(fields()[2], value);
      this.from = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'from' field has been set.
      * @return True if the 'from' field has been set, false otherwise.
      */
    public boolean hasFrom() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'from' field.
      * @return This builder.
      */
    public radar.Flight.Builder clearFrom() {
      from = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'to' field.
      * @return The value.
      */
    public java.lang.CharSequence getTo() {
      return to;
    }


    /**
      * Sets the value of the 'to' field.
      * @param value The value of 'to'.
      * @return This builder.
      */
    public radar.Flight.Builder setTo(java.lang.CharSequence value) {
      validate(fields()[3], value);
      this.to = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'to' field has been set.
      * @return True if the 'to' field has been set, false otherwise.
      */
    public boolean hasTo() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'to' field.
      * @return This builder.
      */
    public radar.Flight.Builder clearTo() {
      to = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'departureAirportCode' field.
      * @return The value.
      */
    public java.lang.CharSequence getDepartureAirportCode() {
      return departureAirportCode;
    }


    /**
      * Sets the value of the 'departureAirportCode' field.
      * @param value The value of 'departureAirportCode'.
      * @return This builder.
      */
    public radar.Flight.Builder setDepartureAirportCode(java.lang.CharSequence value) {
      validate(fields()[4], value);
      this.departureAirportCode = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'departureAirportCode' field has been set.
      * @return True if the 'departureAirportCode' field has been set, false otherwise.
      */
    public boolean hasDepartureAirportCode() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'departureAirportCode' field.
      * @return This builder.
      */
    public radar.Flight.Builder clearDepartureAirportCode() {
      departureAirportCode = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'arrivalAirportCode' field.
      * @return The value.
      */
    public java.lang.CharSequence getArrivalAirportCode() {
      return arrivalAirportCode;
    }


    /**
      * Sets the value of the 'arrivalAirportCode' field.
      * @param value The value of 'arrivalAirportCode'.
      * @return This builder.
      */
    public radar.Flight.Builder setArrivalAirportCode(java.lang.CharSequence value) {
      validate(fields()[5], value);
      this.arrivalAirportCode = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'arrivalAirportCode' field has been set.
      * @return True if the 'arrivalAirportCode' field has been set, false otherwise.
      */
    public boolean hasArrivalAirportCode() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'arrivalAirportCode' field.
      * @return This builder.
      */
    public radar.Flight.Builder clearArrivalAirportCode() {
      arrivalAirportCode = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
      * Gets the value of the 'departureTime' field.
      * @return The value.
      */
    public java.lang.CharSequence getDepartureTime() {
      return departureTime;
    }


    /**
      * Sets the value of the 'departureTime' field.
      * @param value The value of 'departureTime'.
      * @return This builder.
      */
    public radar.Flight.Builder setDepartureTime(java.lang.CharSequence value) {
      validate(fields()[6], value);
      this.departureTime = value;
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
      * Checks whether the 'departureTime' field has been set.
      * @return True if the 'departureTime' field has been set, false otherwise.
      */
    public boolean hasDepartureTime() {
      return fieldSetFlags()[6];
    }


    /**
      * Clears the value of the 'departureTime' field.
      * @return This builder.
      */
    public radar.Flight.Builder clearDepartureTime() {
      departureTime = null;
      fieldSetFlags()[6] = false;
      return this;
    }

    /**
      * Gets the value of the 'arrivalTime' field.
      * @return The value.
      */
    public java.lang.CharSequence getArrivalTime() {
      return arrivalTime;
    }


    /**
      * Sets the value of the 'arrivalTime' field.
      * @param value The value of 'arrivalTime'.
      * @return This builder.
      */
    public radar.Flight.Builder setArrivalTime(java.lang.CharSequence value) {
      validate(fields()[7], value);
      this.arrivalTime = value;
      fieldSetFlags()[7] = true;
      return this;
    }

    /**
      * Checks whether the 'arrivalTime' field has been set.
      * @return True if the 'arrivalTime' field has been set, false otherwise.
      */
    public boolean hasArrivalTime() {
      return fieldSetFlags()[7];
    }


    /**
      * Clears the value of the 'arrivalTime' field.
      * @return This builder.
      */
    public radar.Flight.Builder clearArrivalTime() {
      arrivalTime = null;
      fieldSetFlags()[7] = false;
      return this;
    }

    /**
      * Gets the value of the 'departureTimestamp' field.
      * @return The value.
      */
    public java.lang.Long getDepartureTimestamp() {
      return departureTimestamp;
    }


    /**
      * Sets the value of the 'departureTimestamp' field.
      * @param value The value of 'departureTimestamp'.
      * @return This builder.
      */
    public radar.Flight.Builder setDepartureTimestamp(java.lang.Long value) {
      validate(fields()[8], value);
      this.departureTimestamp = value;
      fieldSetFlags()[8] = true;
      return this;
    }

    /**
      * Checks whether the 'departureTimestamp' field has been set.
      * @return True if the 'departureTimestamp' field has been set, false otherwise.
      */
    public boolean hasDepartureTimestamp() {
      return fieldSetFlags()[8];
    }


    /**
      * Clears the value of the 'departureTimestamp' field.
      * @return This builder.
      */
    public radar.Flight.Builder clearDepartureTimestamp() {
      departureTimestamp = null;
      fieldSetFlags()[8] = false;
      return this;
    }

    /**
      * Gets the value of the 'arrivalTimestamp' field.
      * @return The value.
      */
    public java.lang.Long getArrivalTimestamp() {
      return arrivalTimestamp;
    }


    /**
      * Sets the value of the 'arrivalTimestamp' field.
      * @param value The value of 'arrivalTimestamp'.
      * @return This builder.
      */
    public radar.Flight.Builder setArrivalTimestamp(java.lang.Long value) {
      validate(fields()[9], value);
      this.arrivalTimestamp = value;
      fieldSetFlags()[9] = true;
      return this;
    }

    /**
      * Checks whether the 'arrivalTimestamp' field has been set.
      * @return True if the 'arrivalTimestamp' field has been set, false otherwise.
      */
    public boolean hasArrivalTimestamp() {
      return fieldSetFlags()[9];
    }


    /**
      * Clears the value of the 'arrivalTimestamp' field.
      * @return This builder.
      */
    public radar.Flight.Builder clearArrivalTimestamp() {
      arrivalTimestamp = null;
      fieldSetFlags()[9] = false;
      return this;
    }

    /**
      * Gets the value of the 'duration' field.
      * @return The value.
      */
    public java.lang.Long getDuration() {
      return duration;
    }


    /**
      * Sets the value of the 'duration' field.
      * @param value The value of 'duration'.
      * @return This builder.
      */
    public radar.Flight.Builder setDuration(java.lang.Long value) {
      validate(fields()[10], value);
      this.duration = value;
      fieldSetFlags()[10] = true;
      return this;
    }

    /**
      * Checks whether the 'duration' field has been set.
      * @return True if the 'duration' field has been set, false otherwise.
      */
    public boolean hasDuration() {
      return fieldSetFlags()[10];
    }


    /**
      * Clears the value of the 'duration' field.
      * @return This builder.
      */
    public radar.Flight.Builder clearDuration() {
      duration = null;
      fieldSetFlags()[10] = false;
      return this;
    }

    /**
      * Gets the value of the 'status' field.
      * @return The value.
      */
    public java.lang.CharSequence getStatus() {
      return status;
    }


    /**
      * Sets the value of the 'status' field.
      * @param value The value of 'status'.
      * @return This builder.
      */
    public radar.Flight.Builder setStatus(java.lang.CharSequence value) {
      validate(fields()[11], value);
      this.status = value;
      fieldSetFlags()[11] = true;
      return this;
    }

    /**
      * Checks whether the 'status' field has been set.
      * @return True if the 'status' field has been set, false otherwise.
      */
    public boolean hasStatus() {
      return fieldSetFlags()[11];
    }


    /**
      * Clears the value of the 'status' field.
      * @return This builder.
      */
    public radar.Flight.Builder clearStatus() {
      status = null;
      fieldSetFlags()[11] = false;
      return this;
    }

    /**
      * Gets the value of the 'gate' field.
      * @return The value.
      */
    public java.lang.CharSequence getGate() {
      return gate;
    }


    /**
      * Sets the value of the 'gate' field.
      * @param value The value of 'gate'.
      * @return This builder.
      */
    public radar.Flight.Builder setGate(java.lang.CharSequence value) {
      validate(fields()[12], value);
      this.gate = value;
      fieldSetFlags()[12] = true;
      return this;
    }

    /**
      * Checks whether the 'gate' field has been set.
      * @return True if the 'gate' field has been set, false otherwise.
      */
    public boolean hasGate() {
      return fieldSetFlags()[12];
    }


    /**
      * Clears the value of the 'gate' field.
      * @return This builder.
      */
    public radar.Flight.Builder clearGate() {
      gate = null;
      fieldSetFlags()[12] = false;
      return this;
    }

    /**
      * Gets the value of the 'airline' field.
      * @return The value.
      */
    public java.lang.CharSequence getAirline() {
      return airline;
    }


    /**
      * Sets the value of the 'airline' field.
      * @param value The value of 'airline'.
      * @return This builder.
      */
    public radar.Flight.Builder setAirline(java.lang.CharSequence value) {
      validate(fields()[13], value);
      this.airline = value;
      fieldSetFlags()[13] = true;
      return this;
    }

    /**
      * Checks whether the 'airline' field has been set.
      * @return True if the 'airline' field has been set, false otherwise.
      */
    public boolean hasAirline() {
      return fieldSetFlags()[13];
    }


    /**
      * Clears the value of the 'airline' field.
      * @return This builder.
      */
    public radar.Flight.Builder clearAirline() {
      airline = null;
      fieldSetFlags()[13] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public Flight build() {
      try {
        Flight record = new Flight();
        record.id = fieldSetFlags()[0] ? this.id : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.date = fieldSetFlags()[1] ? this.date : (java.lang.CharSequence) defaultValue(fields()[1]);
        record.from = fieldSetFlags()[2] ? this.from : (java.lang.CharSequence) defaultValue(fields()[2]);
        record.to = fieldSetFlags()[3] ? this.to : (java.lang.CharSequence) defaultValue(fields()[3]);
        record.departureAirportCode = fieldSetFlags()[4] ? this.departureAirportCode : (java.lang.CharSequence) defaultValue(fields()[4]);
        record.arrivalAirportCode = fieldSetFlags()[5] ? this.arrivalAirportCode : (java.lang.CharSequence) defaultValue(fields()[5]);
        record.departureTime = fieldSetFlags()[6] ? this.departureTime : (java.lang.CharSequence) defaultValue(fields()[6]);
        record.arrivalTime = fieldSetFlags()[7] ? this.arrivalTime : (java.lang.CharSequence) defaultValue(fields()[7]);
        record.departureTimestamp = fieldSetFlags()[8] ? this.departureTimestamp : (java.lang.Long) defaultValue(fields()[8]);
        record.arrivalTimestamp = fieldSetFlags()[9] ? this.arrivalTimestamp : (java.lang.Long) defaultValue(fields()[9]);
        record.duration = fieldSetFlags()[10] ? this.duration : (java.lang.Long) defaultValue(fields()[10]);
        record.status = fieldSetFlags()[11] ? this.status : (java.lang.CharSequence) defaultValue(fields()[11]);
        record.gate = fieldSetFlags()[12] ? this.gate : (java.lang.CharSequence) defaultValue(fields()[12]);
        record.airline = fieldSetFlags()[13] ? this.airline : (java.lang.CharSequence) defaultValue(fields()[13]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<Flight>
    WRITER$ = (org.apache.avro.io.DatumWriter<Flight>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<Flight>
    READER$ = (org.apache.avro.io.DatumReader<Flight>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    out.writeString(this.id);

    if (this.date == null) {
      out.writeIndex(1);
      out.writeNull();
    } else {
      out.writeIndex(0);
      out.writeString(this.date);
    }

    out.writeString(this.from);

    out.writeString(this.to);

    out.writeString(this.departureAirportCode);

    out.writeString(this.arrivalAirportCode);

    if (this.departureTime == null) {
      out.writeIndex(1);
      out.writeNull();
    } else {
      out.writeIndex(0);
      out.writeString(this.departureTime);
    }

    if (this.arrivalTime == null) {
      out.writeIndex(1);
      out.writeNull();
    } else {
      out.writeIndex(0);
      out.writeString(this.arrivalTime);
    }

    if (this.departureTimestamp == null) {
      out.writeIndex(1);
      out.writeNull();
    } else {
      out.writeIndex(0);
      out.writeLong(this.departureTimestamp);
    }

    if (this.arrivalTimestamp == null) {
      out.writeIndex(1);
      out.writeNull();
    } else {
      out.writeIndex(0);
      out.writeLong(this.arrivalTimestamp);
    }

    if (this.duration == null) {
      out.writeIndex(1);
      out.writeNull();
    } else {
      out.writeIndex(0);
      out.writeLong(this.duration);
    }

    if (this.status == null) {
      out.writeIndex(1);
      out.writeNull();
    } else {
      out.writeIndex(0);
      out.writeString(this.status);
    }

    if (this.gate == null) {
      out.writeIndex(1);
      out.writeNull();
    } else {
      out.writeIndex(0);
      out.writeString(this.gate);
    }

    if (this.airline == null) {
      out.writeIndex(1);
      out.writeNull();
    } else {
      out.writeIndex(0);
      out.writeString(this.airline);
    }

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      this.id = in.readString(this.id instanceof Utf8 ? (Utf8)this.id : null);

      if (in.readIndex() != 0) {
        in.readNull();
        this.date = null;
      } else {
        this.date = in.readString(this.date instanceof Utf8 ? (Utf8)this.date : null);
      }

      this.from = in.readString(this.from instanceof Utf8 ? (Utf8)this.from : null);

      this.to = in.readString(this.to instanceof Utf8 ? (Utf8)this.to : null);

      this.departureAirportCode = in.readString(this.departureAirportCode instanceof Utf8 ? (Utf8)this.departureAirportCode : null);

      this.arrivalAirportCode = in.readString(this.arrivalAirportCode instanceof Utf8 ? (Utf8)this.arrivalAirportCode : null);

      if (in.readIndex() != 0) {
        in.readNull();
        this.departureTime = null;
      } else {
        this.departureTime = in.readString(this.departureTime instanceof Utf8 ? (Utf8)this.departureTime : null);
      }

      if (in.readIndex() != 0) {
        in.readNull();
        this.arrivalTime = null;
      } else {
        this.arrivalTime = in.readString(this.arrivalTime instanceof Utf8 ? (Utf8)this.arrivalTime : null);
      }

      if (in.readIndex() != 0) {
        in.readNull();
        this.departureTimestamp = null;
      } else {
        this.departureTimestamp = in.readLong();
      }

      if (in.readIndex() != 0) {
        in.readNull();
        this.arrivalTimestamp = null;
      } else {
        this.arrivalTimestamp = in.readLong();
      }

      if (in.readIndex() != 0) {
        in.readNull();
        this.duration = null;
      } else {
        this.duration = in.readLong();
      }

      if (in.readIndex() != 0) {
        in.readNull();
        this.status = null;
      } else {
        this.status = in.readString(this.status instanceof Utf8 ? (Utf8)this.status : null);
      }

      if (in.readIndex() != 0) {
        in.readNull();
        this.gate = null;
      } else {
        this.gate = in.readString(this.gate instanceof Utf8 ? (Utf8)this.gate : null);
      }

      if (in.readIndex() != 0) {
        in.readNull();
        this.airline = null;
      } else {
        this.airline = in.readString(this.airline instanceof Utf8 ? (Utf8)this.airline : null);
      }

    } else {
      for (int i = 0; i < 14; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          this.id = in.readString(this.id instanceof Utf8 ? (Utf8)this.id : null);
          break;

        case 1:
          if (in.readIndex() != 0) {
            in.readNull();
            this.date = null;
          } else {
            this.date = in.readString(this.date instanceof Utf8 ? (Utf8)this.date : null);
          }
          break;

        case 2:
          this.from = in.readString(this.from instanceof Utf8 ? (Utf8)this.from : null);
          break;

        case 3:
          this.to = in.readString(this.to instanceof Utf8 ? (Utf8)this.to : null);
          break;

        case 4:
          this.departureAirportCode = in.readString(this.departureAirportCode instanceof Utf8 ? (Utf8)this.departureAirportCode : null);
          break;

        case 5:
          this.arrivalAirportCode = in.readString(this.arrivalAirportCode instanceof Utf8 ? (Utf8)this.arrivalAirportCode : null);
          break;

        case 6:
          if (in.readIndex() != 0) {
            in.readNull();
            this.departureTime = null;
          } else {
            this.departureTime = in.readString(this.departureTime instanceof Utf8 ? (Utf8)this.departureTime : null);
          }
          break;

        case 7:
          if (in.readIndex() != 0) {
            in.readNull();
            this.arrivalTime = null;
          } else {
            this.arrivalTime = in.readString(this.arrivalTime instanceof Utf8 ? (Utf8)this.arrivalTime : null);
          }
          break;

        case 8:
          if (in.readIndex() != 0) {
            in.readNull();
            this.departureTimestamp = null;
          } else {
            this.departureTimestamp = in.readLong();
          }
          break;

        case 9:
          if (in.readIndex() != 0) {
            in.readNull();
            this.arrivalTimestamp = null;
          } else {
            this.arrivalTimestamp = in.readLong();
          }
          break;

        case 10:
          if (in.readIndex() != 0) {
            in.readNull();
            this.duration = null;
          } else {
            this.duration = in.readLong();
          }
          break;

        case 11:
          if (in.readIndex() != 0) {
            in.readNull();
            this.status = null;
          } else {
            this.status = in.readString(this.status instanceof Utf8 ? (Utf8)this.status : null);
          }
          break;

        case 12:
          if (in.readIndex() != 0) {
            in.readNull();
            this.gate = null;
          } else {
            this.gate = in.readString(this.gate instanceof Utf8 ? (Utf8)this.gate : null);
          }
          break;

        case 13:
          if (in.readIndex() != 0) {
            in.readNull();
            this.airline = null;
          } else {
            this.airline = in.readString(this.airline instanceof Utf8 ? (Utf8)this.airline : null);
          }
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










